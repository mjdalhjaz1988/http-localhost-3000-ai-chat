// ููุงูุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู - ุงูุณูุฑูุฑ ุงูุฑุฆูุณู
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const compression = require('compression');
const morgan = require('morgan');
const path = require('path');
const http = require('http');
const socketIo = require('socket.io');
require('dotenv').config();

// ุงุณุชูุฑุงุฏ ุงูุฑุงูุชุฑ
const authRoutes = require('./routes/auth');
const aiRoutes = require('./routes/ai');
const userRoutes = require('./routes/user');
const analyticsRoutes = require('./routes/analytics');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// ุฅุนุฏุงุฏุงุช ุงูุฃูุงู
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
      fontSrc: ["'self'", "https://fonts.gstatic.com"],
      scriptSrc: ["'self'", "'unsafe-inline'"],
      imgSrc: ["'self'", "data:", "https:"],
      connectSrc: ["'self'", "ws:", "wss:"]
    }
  }
}));

// ูุนุฏู ุงูุทูุจุงุช
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 ุฏูููุฉ
  max: 100, // ุญุฏ ุฃูุตู 100 ุทูุจ ููู IP
  message: {
    error: 'ุชู ุชุฌุงูุฒ ุงูุญุฏ ุงูุฃูุตู ููุทูุจุงุชุ ูุฑุฌู ุงููุญุงููุฉ ูุงุญูุงู'
  }
});

app.use(limiter);
app.use(compression());
app.use(morgan('combined'));
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// ุฎุฏูุฉ ุงููููุงุช ุงูุซุงุจุชุฉ
app.use(express.static(path.join(__dirname, 'public')));

// ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช
const connectDB = async () => {
  try {
    const mongoURI = process.env.MONGODB_URI || 'mongodb://localhost:27017/ai_agency';
    await mongoose.connect(mongoURI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ');
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', error.message);
    process.exit(1);
  }
};

// ุงูุฑุงูุชุฑ ุงูุฑุฆูุณู
app.use('/api/auth', authRoutes);
app.use('/api/ai', aiRoutes);
app.use('/api/user', userRoutes);
app.use('/api/analytics', analyticsRoutes);

// ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก ุงูุนุงูุฉ
app.use((err, req, res, next) => {
  console.error('ุฎุทุฃ ูู ุงูุณูุฑูุฑ:', err.stack);
  res.status(500).json({
    success: false,
    message: 'ุญุฏุซ ุฎุทุฃ ุฏุงุฎูู ูู ุงูุณูุฑูุฑ',
    error: process.env.NODE_ENV === 'development' ? err.message : 'ุฎุทุฃ ุฏุงุฎูู'
  });
});

// ูุนุงูุฌุฉ ุงูุตูุญุงุช ุบูุฑ ุงูููุฌูุฏุฉ
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: 'ุงูุตูุญุฉ ุงููุทููุจุฉ ุบูุฑ ููุฌูุฏุฉ'
  });
});

// Socket.IO ููุงุชุตุงู ุงููุจุงุดุฑ
io.on('connection', (socket) => {
  console.log('๐ ูุณุชุฎุฏู ุฌุฏูุฏ ูุชุตู:', socket.id);
  
  // ุงูุถูุงู ุฅูู ุบุฑูุฉ ุงููุณุชุฎุฏู
  socket.on('join-user-room', (userId) => {
    socket.join(`user-${userId}`);
    console.log(`๐ค ุงููุณุชุฎุฏู ${userId} ุงูุถู ุฅูู ุบุฑูุชู`);
  });
  
  // ูุนุงูุฌุฉ ุฑุณุงุฆู ุงูุฐูุงุก ุงูุงุตุทูุงุนู
  socket.on('ai-message', async (data) => {
    try {
      // ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ ูุฅุฑุณุงู ุงูุฑุฏ
      const response = await processAIMessage(data.message, data.userId);
      socket.emit('ai-response', {
        success: true,
        response: response,
        timestamp: new Date()
      });
    } catch (error) {
      socket.emit('ai-response', {
        success: false,
        error: 'ุญุฏุซ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ',
        timestamp: new Date()
      });
    }
  });
  
  // ูุทุน ุงูุงุชุตุงู
  socket.on('disconnect', () => {
    console.log('โ ูุณุชุฎุฏู ูุทุน ุงูุงุชุตุงู:', socket.id);
  });
});

// ุฏุงูุฉ ูุนุงูุฌุฉ ุฑุณุงุฆู ุงูุฐูุงุก ุงูุงุตุทูุงุนู
async function processAIMessage(message, userId) {
  // ููุง ูููู ุฅุถุงูุฉ ููุทู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุงูุญูููู
  // ูุซู ุงูุงุชุตุงู ุจู OpenAI API ุฃู ููุงุฐุฌ ุฃุฎุฑู
  
  const responses = [
    'ูุฑุญุจุงู! ููู ูููููู ูุณุงุนุฏุชู ุงููููุ',
    'ุฃูุง ููุง ููุณุงุนุฏุชู ูู ุฌููุน ุงุญุชูุงุฌุงุชู ุงูุชูููุฉ.',
    'ูููููู ูุณุงุนุฏุชู ูู ุชุทููุฑ ุงูููุงูุนุ ุงูุจุญุซ ุนู ูุธุงุฆูุ ูุงูุฃุชูุชุฉ.',
    'ูุง ูู ุงููุดุฑูุน ุงูุฐู ุชุฑูุฏ ุงูุนูู ุนูููุ'
  ];
  
  // ูุญุงูุงุฉ ุชุฃุฎูุฑ ุงููุนุงูุฌุฉ
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  return {
    message: responses[Math.floor(Math.random() * responses.length)],
    type: 'text',
    suggestions: [
      'ุชุทููุฑ ูููุน ููุจ',
      'ุงูุจุญุซ ุนู ูุธููุฉ',
      'ุฃุชูุชุฉ ุงูููุงู',
      'ุชุญููู ุงูุจูุงูุงุช'
    ]
  };
}

// ุจุฏุก ุงูุณูุฑูุฑ
const PORT = process.env.PORT || 3000;

connectDB().then(() => {
  server.listen(PORT, () => {
    console.log(`๐ ุงูุณูุฑูุฑ ูุนูู ุนูู ุงููููุฐ ${PORT}`);
    console.log(`๐ ุงูุฑุงุจุท: http://localhost:${PORT}`);
  });
});

// ูุนุงูุฌุฉ ุฅุบูุงู ุงูุณูุฑูุฑ ุจุดูู ุขูู
process.on('SIGTERM', () => {
  console.log('๐ ุฅููุงู ุงูุณูุฑูุฑ...');
  server.close(() => {
    console.log('โ ุชู ุฅููุงู ุงูุณูุฑูุฑ ุจูุฌุงุญ');
    mongoose.connection.close();
  });
});

module.exports = app;